public class HardBounceEMailClass {
     //ApexPages.StandardController sc;
    public  static void getContact(){
        
        map<id,string> contactEmailMap= new map<id,string>();
        list<contact>updatedConList= new list<contact>();
        list<contact>conList= new list<contact>();
        
        conList=[select id,name,email from contact where RecordType.Name='WG Contacts' 
                 AND Remove_Reason__c=null AND Hard_Bounce_Date__c=null];
        //list<contact>cloneConList=conList.clone();
        
        system.debug('conList:'+conList);
        for(contact con:conList){
            //string qwe =conList.remove(con.email);
            contactEmailMap.put(con.id,con.Email);
            system.debug('contactEmailMap:'+contactEmailMap);         
            // string conEmail=contactEmailMap.remove(con.Id);
            // system.debug('conEmail:'+conEmail);         
        }
        for(contact c:conList){
            c.email='';
        }
        if(conlist.size()>0)
            update conList;
        system.debug('conListwithNullEmail:'+conList);         
        
        
        for(contact c:conList){
            if(contactEmailMap.containsKey(c.id)){
                c.email=contactEmailMap.get(c.id);
            }
        }
        if(conlist.size()>0)
            update conlist;
       // system.debug('conListwithEmail:'+conlist);  
               
    }
}


HTML 

<template>
    <div class="slds-form-element">
     <label class="slds-form-element__label" for="combobox-id-5">Class</label>
        <div class="slds-form-element__control">
          <div class="slds-combobox_container slds-size_small">
            <section id="maindiv" class="slds-combobox slds-dropdown-trigger slds-dropdown-trigger_click slds-is-open" aria-expanded="true" aria-haspopup="listbox" role="combobox">
              <div onclick={handlePriorityClick} onmouseleave={handleMouseOut} class="slds-combobox__form-element slds-input-has-icon slds-input-has-icon_right" role="none">
                <input type="text" class="slds-input slds-combobox__input slds-has-focus slds-combobox__input-value" id="combobox-id-5" aria-controls="listbox-id-5"  role="textbox" placeholder={defaultText} readonly=""
                />
            
                <span class="slds-icon_container slds-icon-utility-down slds-input__icon slds-input__icon_right">
                    <lightning-icon icon-name="utility:down" size="x-small" alternative-text="Approved"></lightning-icon>
                </span>
              </div>
              <template if:true={iswindowOpen}>
              <div onmouseenter={handlemouseOver} onmouseleave={handleMouseLeave} id="listbox-id-5" class="slds-dropdown slds-dropdown_length-5 slds-dropdown_fluid" role="listbox">
                <ul class="slds-listbox slds-listbox_vertical" role="presentation">
                <template for:each={_options} for:item="option">
                    <c-list-items key={option.valueP}
                                         value={option.value}
                                         label={option.label}
                                         selected={option.selected}
                                         onselected={handlePrioritySelectedClick}></c-list-items>
                    
                  </template>
                  </ul>
              </div>
            </template>

            </section>
          </div>
        </div>
      </div>    
      &nbsp;
        <div class="slds-form-element">
     <label class="slds-form-element__label" for="combobox-id-6">Priority</label>
        <div class="slds-form-element__control">
          <div class="slds-combobox_container slds-size_small">
            <section id="maindiv1" class="slds-combobox slds-dropdown-trigger slds-dropdown-trigger_click slds-is-open" aria-expanded="true" aria-haspopup="listbox" role="combobox">
              <div onclick={handleClassClick}  class="slds-combobox__form-element slds-input-has-icon slds-input-has-icon_right" role="none">
                <input type="text" class="slds-input slds-combobox__input slds-has-focus slds-combobox__input-value" id="combobox-id-6" aria-controls="listbox-id-6"  role="textbox" placeholder={defaultText} readonly=""
                />
            
                <span class="slds-icon_container slds-icon-utility-down slds-input__icon slds-input__icon_right">
                    <lightning-icon icon-name="utility:down" size="x-small" alternative-text="Approved"></lightning-icon>
                </span>
              </div>
              <template if:true={iswindowOpen1}>
              <div onmouseenter={handlemouseOver1} onmouseleave={handleMouseLeave1} id="listbox-id-6" class="slds-dropdown slds-dropdown_length-5 slds-dropdown_fluid" role="listbox">
                <ul class="slds-listbox slds-listbox_vertical" role="presentation">
                   
                    
                  </ul>
              </div>
            </template>

            </section>
          </div>
        </div>
      </div>   
</template>


JS FILE:

import { LightningElement,api,track } from 'lwc';
export default class MassButtonComponet extends LightningElement {
    @api priorityOptions =  [
        { value: 'A', label: 'A' },
        { value: 'B', label: 'B' },
        { value: 'C', label: 'C' },
        { value: 'D', label: 'D' },
       
    ];
    
    @api classOptions =  [
        { value: 'Buyer', label: 'Buyer' },
        { value: 'Specifier', label: 'Specifier' },
        { value: 'C', label: 'C' },
        { value: 'D', label: 'D' },
       
    ];
 
    @api selectedValues=[];
    //@api pLabel=' ';
    @track _options= [];
       @track class_options= [];

    @track iswindowOpen=false;

  /*Init() call..*/
    connectedCallback() {
        this._options = JSON.parse(JSON.stringify(this.priorityOptions));
        alert('parentpriorityOptions:'+this._options);
       // alert('parentClassOptions:'+this.class_options);

        //sort all array items befor display it to ui
        this._options=this._options.sort(function compare(a,b) {
            if (a.value == 'All'){
              return -1;
            }
            else if (a.value < b.value){
              return -1;
            }
            if (a.value > b.value){
              return 1;
            }
            return 0;
      });
      
          
      
      }
      get defaultText(){
        if (this.selectedValues.length === 0) {
                  alert('parent1selectedValues.length:'+this.selectedValues.length);

          return "Select an option...";
        }
        if (this.selectedValues.length === 1) {
                  alert('parent2selectedValues[0].label:'+this.selectedValues[0].label);

          return this.selectedValues[0].label;

        }
        else{
                            alert('parent3this.selectedValues.length:'+this.selectedValues.length);

          return this.selectedValues.length+" Options Selected";

        }
      }

      handlePriorityClick(event){
          //console.log('query selector..'+this.template.querySelector("section"));
        this.iswindowOpen=true;
        //this.template.querySelector("section").classList.add("slds-is-open");
      }

      handleMouseOut(event){
       if(this.iswindowOpen){
        return;
       }
      // this.template.querySelector("section").classList.remove("slds-is-open");
      }

      handleMouseLeave(event){
        this.iswindowOpen=false;
       // this.template.querySelector("section").classList.remove("slds-is-open");

      }

      handlemouseOver(event){
        this.iswindowOpen=true;
      }

      handlePrioritySelectedClick(event){

        var value;
        var selected;
        event.preventDefault();
        event.stopPropagation();
    
        const data = event.detail;
    
        value = data.value;
        alert('value'+ value)
        selected = data.selected;
    
        //shift key ADDS to the list (unless clicking on a previously selected item)
        //also, shift key does not close the dropdown.
        if (data) {
          this._options.forEach(function(option) {
            if (option.value === value) {
              option.selected = selected === true ? false : true;
            }
          });
        }
        else {
          this._options.forEach(function(option) {
            if (option.value === value) {
              option.selected = selected === "true" ? false : true;
            } else {
              option.selected = false;
            }
          });
         // this.closeDropdown();
        }
    
        this.selectedValues = this.getOptionsArray();
    
      }

      getOptionsArray(){
        var pills = [];
        this._options.forEach(function(element) {
          var interator = 0;
          if (element.selected) {
            pills.push({label:element.label, name:element.value,});
          }
        });
        return pills;
      }
    
}


js file for field set component


import { LightningElement, api, track } from 'lwc';
import { refreshApex } from '@salesforce/apex';
import { updateRecord } from 'lightning/uiRecordApi';
import { ShowToastEvent } from 'lightning/platformShowToastEvent';
import getFieldsAndRecords from '@salesforce/apex/FieldSetHelper.getFieldsAndRecords';
export default class NewLwcFieldSetComponent extends LightningElement {
    @api recordId;  // record id from record detail page e.g. ''0012v00002WCUdxAAH'
    @api SFDCobjectApiName; //kind of related list object API Name e.g. 'Case'
    @api fieldSetName; // FieldSet which is defined on that above object e.g. 'CaseRelatedListFS'
    @api criteriaFieldAPIName; // This field will be used in WHERE condition e.g.'AccountId'
    @api firstColumnAsRecordHyperLink; //if the first column can be displayed as hyperlink

    @track columns;   //columns for List of fields datatable
    @track tableData;   //data for list of fields datatable
     saveDraftValues = [];
    recordCount; //this displays record count inside the ()
    lblobjectName; //this displays the Object Name whose records are getting displayed

    connectedCallback(){
        let firstTimeEntry = false;
        let firstFieldAPI;

        //make an implicit call to fetch records from database
        getFieldsAndRecords({ strObjectApiName: this.SFDCobjectApiName,
                                strfieldSetName:  this.fieldSetName,
                                criteriaField: this.criteriaFieldAPIName,
                                criteriaFieldValue: this.recordId})
        .then(data=>{        
            //get the entire map
            let objStr = JSON.parse(data); 
            //alert('objStr data:'+objStr); 
            
            /* retrieve listOfFields from the map,
             here order is reverse of the way it has been inserted in the map */
            let listOfFields= JSON.parse(Object.values(objStr)[1]);
                        //alert('listOfFields data:'+listOfFields); 

            
            //retrieve listOfRecords from the map
            let listOfRecords = JSON.parse(Object.values(objStr)[0]);
                                   // alert('listOfFields data:'+listOfFields); 


            let items = []; //local array to prepare columns

            /*if user wants to display first column has hyperlink and clicking on the link it will
                naviagte to record detail page. Below code prepare the first column with type = url
            */
            listOfFields.map(element=>{
                //it will enter this if-block just once
                if(this.firstColumnAsRecordHyperLink !=null && this.firstColumnAsRecordHyperLink=='Yes'
                                                        && firstTimeEntry==false){
                    firstFieldAPI  = element.fieldPath; 
                    //perpare first column as hyperlink                                     
                    items = [...items ,
                                    {
                                        label: element.label, 
                                        fieldName: 'URLField',
                                        fixedWidth: 150,
                                        type: 'url', 
                                        typeAttributes: { 
                                            label: {
                                                fieldName: element.fieldPath
                                            },
                                            target: '_blank'
                                        },
                                        sortable: true,
                                        editable: true
 
                                    }
                    ];
                    firstTimeEntry = true;
                } else {
                    items = [...items ,{label: element.label, 
                        fieldName: element.fieldPath, editable: true
}];
                }   
            });
            //finally assigns item array to columns
            this.columns = items; 
                                    //alert('columns data:'+this.columns); 

            this.tableData = listOfRecords;
                                    //alert('tableData data:'+this.tableData); 


            console.log('listOfRecords',listOfRecords);
            /*if user wants to display first column has hyperlink and clicking on the link it will
                naviagte to record detail page. Below code prepare the field value of first column
            */
            if(this.firstColumnAsRecordHyperLink !=null && this.firstColumnAsRecordHyperLink=='Yes'){
                let URLField;
                //retrieve Id, create URL with Id and push it into the array
                this.tableData = listOfRecords.map(item=>{
                    URLField = '/lightning/r/' + this.SFDCobjectApiName + '/' + item.Id + '/view';
                    return {...item,URLField};                     
                });
                
                //now create final array excluding firstFieldAPI
                this.tableData = this.tableData.filter(item => item.fieldPath  != firstFieldAPI);
            }

            //assign values to display Object Name and Record Count on the screen
            this.lblobjectName = this.SFDCobjectApiName;
            this.recordCount = this.tableData.length;
            this.error = undefined;   
        })
        .catch(error =>{
            this.error = error;
            console.log('error',error);
            this.tableData = undefined;
            this.lblobjectName = this.SFDCobjectApiName;
        })        
    }
    
    handleSave(event) {
        this.saveDraftValues = event.detail.draftValues;
        alert('saveDraftValues:'+this.saveDraftValues);
        const recordInputs = this.saveDraftValues.slice().map(draft => {
            const fields = Object.assign({}, draft);
            return { fields };
        });

        // Updateing the records using the UiRecordAPi
        const promises = recordInputs.map(recordInput => updateRecord(recordInput));
        Promise.all(promises).then(res => {
            this.dispatchEvent(
                new ShowToastEvent({
                    title: 'Success',
                    message: 'Records Updated Successfully!!',
                    variant: 'success'
                })
            );
            this.saveDraftValues = [];
          return  refreshApex(this.tableData);

         }).catch(error => {
            this.dispatchEvent(
                new ShowToastEvent({
                    title: 'Error',
                    message: 'An Error Occured!!',
                    variant: 'error'
                })
            );
        }).finally(() => {
            this.saveDraftValues = [];

        });
    }

    // This function is used to refresh the table once data updated
    async refresh() {
       await refreshApex(this.tableData);
    }


}


html file:

<template>   
    <lightning-card title ="123"> 
    <div class="c-container">
        <div class="slds-card">
            <div class="slds-media__body">
                <h2 class="slds-card__header-title">
                    <span>{lblobjectName} Records ({recordCount})</span>
                </h2>
            </div>
            <div class="slds-card__body">
                <lightning-datatable 
                    key-field="Id"
                    data={tableData}
                    columns={columns}
                     hide-checkbox-column 
                     onsave={handleSave}
                     draft-values={saveDraftValues}
                    min-column-width=200>
                </lightning-datatable> 
            </div>                           
        </div> 
    </div>  
    </lightning-card>  
</template>











html file:

<template>
    <lightning-card>                               
        <lightning-tabset  active-tab-value="Header">
          <lightning-tab label="Header">
		   Signet Jewlers
          <div class="demo-only demo-only--sizing slds-grid slds-wrap">
             <div class="slds-size_1-of-3"   >
                 <div class="slds-form__item slds-no-space">
       
                 </div>
             </div>
               <div class="slds-size_1-of-3"   >
                 <div class="slds-form__item slds-no-space">            
        <lightning-combobox
            label="Type"
            value={value}
            placeholder="Select Type"
            options={options}
            onchange={handleChange} ></lightning-combobox>
                 </div>
             </div>
          </div>                        
          <template if:true={tipCardList}>
             
             <lightning-datatable
                    key-field="Id"
                    data={tipCardList}
                  columns={columnsList}
                     onrowselection={selectedRowHandler}>>
 </lightning-datatable>
 
          </template>
		  
           </lightning-tab>
           <!--  Next Tab Show Data. -->
           <lightning-tab label="Confirmation"> 

		   <lightning-datatable
                    key-field="Id"
                    data={newTipCardList}
                  columns={columns}>
 </lightning-datatable>
		   
		   
           </lightning-tab>
       </lightning-tabset>
      
    </lightning-card>
</template>

